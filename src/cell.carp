(load "src/types.carp")
(use Types)
(use Maybe)
(use Array)
(load "scheduler.carp")

(defmodule Cell
  
  (sig content (Fn [(Ref (Cell a t))] (Maybe a)))
  (defn content [cell]
    @(Cell.content cell))

  (sig propagators (Fn [(Ref (Cell a t))] (Array Propagator)))
  (defn propagators [cell]
    @(Cell.propagators cell))

  (doc add-content "Update a Cell's contents.")
  (sig add-content (Fn [(Ref (Cell a t)) (Ref (Maybe a))] ()))
  (defn add-content [cell increment]
    (let [cell-val (Cell.content cell)]
      (match @increment
        (Nothing) ()
        (Just x) (if (nothing? cell-val) 
                     (do (Scheduler.schedule-propagators (Cell.propagators cell))
                         (Cell.set-content! cell (Just x))) 
                     (assert (= cell-val increment)))))) 
  
  (doc add-propagator "Add a propagator to a cell.")
  (sig add-propagator (Fn [(Ref (Cell a t)) (Ref Propagator)] ()))
  (defn add-propagator [cell propagator] 
    (let [props (propagators cell)] 
    (match (index-of (Cell.propagators cell) propagator) 
        (Nothing) 
          (do (Cell.set-propagators! cell (push-back props @propagator))
              (Scheduler.schedule-propagator propagator))
        (Just x) ())))

  (doc make-cell "Make a cell of a particular type.")
  (defmacro make-cell [a t] 
    (list 'the (list 'Cell a t) (list 'Cell.init 'Nothing 'zero))) 
)
