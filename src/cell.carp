(use Maybe)
(use Array)

(defmodule Cell
  (deftype (Cell a) (Cell [content (Maybe a), propagators (Array (Fn [a] b))]))
  
  (deftype Message 
    Content
    Add-Content
    Add-Propagator)
  
  (private add-content)
  (defn add-content [cell increment]
    (let [cell-val (Cell.content cell)]
      (match increment
        (Nothing) (Nothing)
        (Just x) (if (nothing? cell-val) 
                     (do (Cell.update-content cell (Just x)) 
                         (alert-propagators (Cell.propagators cell))) 
                     (if (not equal? cell-val increment) ;; need to implement equal-function.
                         (Error "Inconsistent")))))) 

  (private add-propagator)
  (defn add-propagator [cell propagator] 
    (let [props (Cell.propagators cell)] 
    (match (index-of props propagator) 
        (Nothing) (do ((Cell.update-propagators cell (push-back props
        propagator)))
                      (alert-propagator propagator))
        (Just _)))) ;;do nothing?

  (defn make-cell [] 
    (let [cell (Cell.init Nothing zero)]
    (fn [message] 
      (match message 
        (Content) (Cell.content cell)
        (Add-Content) (fn [x] (add-content cell x))
        (Add-Propagator) (fn [x] (add-propagator cell x))))))
)
