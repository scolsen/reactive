(use Map)
(use Array)

;;;; The following differs from Rudal's implementation in that we don't bother
;;;; with a map. Even though run order should not matter, for now I'm assuming
;;;; I/we will want to be able to determine the run order of the propagation
;;;; thunks. If it truly does not matter we can implement maps later.

(defmodule Scheduler

  (deftype State Done )

  (def alerted-propagators (zero))
  ;; all propagators ever scheduled during the scheduler's lifetime.
  (def history (zero)) 
  (def abort-process false)
  (def last-value-of-run State.Done)

  (defn start-scheduler [] 
    (do (clear-alerted-propagators)
        (clear-history)))

  (defn any-propagators-alerted? [] 
    (> 0 (length alerted-propagators)))

  (defn clear-alerted-propagators []
    (set! alerted-propagators (zero)))

  (defn clear-history []
    (set! all-propagators (zero)))

  (defn order-preserving-insert [propagator-map propagator]
    (match (get-maybe propagator-map propagator)
      (Nothing) (do (put! propagator-map propagator true)
                    (push-back! ordered-jobs propagator)) 
      (Just x) ()))

  (defn ordered-key-list [propagator-map job-list] 
    (if reproducible-run-order 
        (suffix-array ordered-jobs 1) 
        (keys propagator-map)))  

  (defn alert-propagators [propagators] 
    (do (foreach [propagator propagators] 
          (order-preserving-insert alerted-propagators (the Fn propagator))
          (order-preserving-insert past-alerted-propagators past-jobs))))
)
